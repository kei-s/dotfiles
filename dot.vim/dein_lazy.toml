[[plugins]]
repo = 'Shougo/neocomplete'
if = "has('lua')"
on_event = 'InsertEnter'
hook_source = '''
  " neocomplete.vim
  let g:neocomplete#enable_at_startup = 1
  " Use smartcase.
  let g:neocomplete#enable_smart_case = 1
  " Recommended key-mappings.
  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? "\<C-y>" : "\<CR>"
  endfunction
  " <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><C-y>  neocomplete#close_popup()
  inoremap <expr><C-e>  neocomplete#cancel_popup()
  " Enable omni completion.
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif
  let g:neocomplete#force_omni_input_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
  let g:neocomplete#force_omni_input_patterns.typescript = '[^. *\t]\.\w*\|\h\w*::'
'''

[[plugins]]
repo = 'vim-syntastic/syntastic'
on_if = 1
hook_add = '''
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_check_on_open = 0
  let g:syntastic_aggregate_errors = 1
  let g:syntastic_ruby_checkers = ['mri', 'rubocop']
  let g:syntastic_go_checkers = ['go', 'golint']
  let g:syntastic_elixir_checkers = ['elixir']
  let g:syntastic_enable_elixir_checker = 1
  let g:syntastic_python_checkers = ['flake8']
  let g:syntastic_typescript_checkers = ['tsuquyomi', 'tslint']
  let g:syntastic_rust_checkers = ['cargo']
  let g:syntastic_markdown_checkers = ['mdl', 'textlint']
  autocmd FileType markdown let b:syntastic_markdown_textlint_args =
    \ get(g:, 'syntastic_markdown_textlint_args', '') .
    \ FindConfig('-c', '.textlintrc', expand('<afile>:p:h', 1))
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'
on_map = ',c'

[[plugins]]
repo = 'vim-scripts/JSON.vim'
on_ft = 'json'

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = 'javascript'

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = 'html'

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'

[[plugins]]
# PREPARE: cargo install racer
repo = 'racer-rust/vim-racer'
hook_add = '''
  let g:racer_cmd = "/Users/shiratsuchi/.cargo/bin/racer"
  let g:neocomplete#enable_at_startup = 1
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  let g:neocomplete#sources#omni#input_patterns.rust = '[^.[:digit:] *\t]\%(\.\|\::\)\%(\h\w*\)\?'
'''
on_ft = 'rust'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'

[[plugins]]
repo = 'elixir-editors/vim-elixir'
on_ft = 'elixir'

[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'
