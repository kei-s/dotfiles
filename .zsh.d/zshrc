# .zsh.d/zshrc
# https://github.com/clear-code/zsh.d/blob/master/zshrc

# emacs keybind in shell
bindkey -e

# keymap
bindkey "^?"    backward-delete-char
bindkey "^H"    backward-delete-char
bindkey '^@'    backward-delete-char
bindkey "^[[3~" backward-delete-char
bindkey "^[[1~" beginning-of-line
bindkey "^[[4~" end-of-line
# http://subtech.g.hatena.ne.jp/secondlife/20110222/1298354852
bindkey '^R' history-incremental-pattern-search-backward
bindkey '^S' history-incremental-pattern-search-forward

# cd
setopt auto_cd
setopt auto_pushd
cdpath=(~)
chpwd_functions=($chpwd_functions dirs)

# history
HISTFILE=~/.zsh-history
HISTSIZE=10000000
SAVEHIST=$HISTSIZE
setopt extended_history
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt inc_append_history
setopt share_history
setopt no_flow_control

# PROMPT
setopt prompt_subst
setopt prompt_percent
setopt transient_rprompt
autoload -Uz colors
colors
## for VCS info
autoload -Uz add-zsh-hook
# for rbenv
function _precmd_rbenv() {
  psvar=()
  [[ -s ~/.rbenv/version ]] &&
  psvar[1]="$(rbenv version-name)"
}
add-zsh-hook precmd _precmd_rbenv
# for vcs_info
function _precmd_vcs_info() {
  LANG=en_US.UTF-8 vcs_info
}
add-zsh-hook precmd _precmd_vcs_info
autoload -Uz vcs_info
zstyle ':vcs_info:*' formats       "%b"    "%s"
zstyle ':vcs_info:*' actionformats "%b|%a" "%s"
function vcs_info_for_git() {
  VCS_GIT_PROMPT="${vcs_info_msg_0_}"
  VCS_GIT_PROMPT_CLEAN="%{${fg[green]}%}"
  VCS_GIT_PROMPT_DIRTY="%{${fg[yellow]}%}"

  VCS_GIT_PROMPT_ADDED="%{${fg[cyan]}%}A%{${reset_color}%}"
  VCS_GIT_PROMPT_MODIFIED="%{${fg[yellow]}%}M%{${reset_color}%}"
  VCS_GIT_PROMPT_DELETED="%{${fg[red]}%}D%{${reset_color}%}"
  VCS_GIT_PROMPT_RENAMED="%{${fg[blue]}%}R%{${reset_color}%}"
  VCS_GIT_PROMPT_UNMERGED="%{${fg[magenta]}%}U%{${reset_color}%}"
  VCS_GIT_PROMPT_UNTRACKED="%{${fg[red]}%}?%{${reset_color}%}"

  INDEX=$(git status --porcelain 2> /dev/null)
  if [[ -z "$INDEX" ]];then
    STATUS="${VCS_GIT_PROMPT_CLEAN}${VCS_GIT_PROMPT}%{${reset_color}%}"
  else
    STATUS=" ${VCS_GIT_PROMPT_DIRTY}${VCS_GIT_PROMPT}%{${reset_color}%}"
    if $(echo "$INDEX" | grep '^UU ' &> /dev/null); then
      STATUS="$VCS_GIT_PROMPT_UNMERGED$STATUS"
    fi
    if $(echo "$INDEX" | grep '^R ' &> /dev/null); then
      STATUS="$VCS_GIT_PROMPT_RENAMED$STATUS"
    fi
    if $(echo "$INDEX" | grep '^ D ' &> /dev/null); then
      STATUS="$VCS_GIT_PROMPT_DELETED$STATUS"
    fi
    if $(echo "$INDEX" | grep '^?? ' &> /dev/null); then
      STATUS="$VCS_GIT_PROMPT_UNTRACKED$STATUS"
    fi
    if $(echo "$INDEX" | grep '^ M ' &> /dev/null); then
      STATUS="$VCS_GIT_PROMPT_MODIFIED$STATUS"
    fi
    if $(echo "$INDEX" | grep '^A ' &> /dev/null); then
      STATUS="$VCS_GIT_PROMPT_ADDED$STATUS"
    elif $(echo "$INDEX" | grep '^M ' &> /dev/null); then
      STATUS="$VCS_GIT_PROMPT_ADDED$STATUS"
    fi
  fi
  echo "${STATUS}"
}
function vcs_info_with_color() {
  VCS_PROMPT_PREFIX="%{${fg[green]}%}[%{${reset_color}%}"
  VCS_PROMPT_SUFFIX="%{${fg[green]}%}]%{${reset_color}%}"

  VCS_NOT_GIT_PROMPT="%{${fg[green]}%}${vcs_info_msg_0_}%{${reset_color}%}"

  if [[ -n "${vcs_info_msg_0_}" ]]; then
    if [[ "${vcs_info_msg_1_}" = "git" ]]; then
      STATUS=$(vcs_info_for_git)
    else
      STATUS=${VCS_NOT_GIT_PROMPT}
    fi
    echo "${VCS_PROMPT_PREFIX}${STATUS}${VCS_PROMPT_SUFFIX}"
  fi
}
## PROMPT
RUBY_PROMPT="%1(v| %U%B%{${fg[magenta]}%}(%1v)%{${reset_color}%}%b%u|)"
EXIT_PROMPT="%(?.%?.%{%B%}%K{red}%?%{%k%}%{%b%}"
PROMPT="[%n@%m]%# "
RPROMPT='[%~]$RUBY_PROMPT$(vcs_info_with_color)$EXIT_PROMPT'

# Additional completion definitions https://github.com/zsh-users/zsh-completions
# Additional completion definitions for homebrew
fpath=(~/.zsh.d/zsh-completions /usr/local/share/zsh/site-functions $fpath)
# Auto Completion
autoload -U compinit
compinit -u
zstyle ':completion:*' format '%B%d%b'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:default' menu select=2
zstyle ':completion:*:default' list-colors ""
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' completer \
  _oldlist _complete _match _ignored _approximate _prefix
zstyle ':completion:*' use-cache yes
zstyle ':completion:*' verbose yes
zstyle ':completion:sudo:*' environ PATH="$SUDO_PATH:$PATH"
setopt complete_in_word
setopt glob_complete
setopt hist_expand
setopt no_beep
setopt numeric_glob_sort

# expansion
setopt magic_equal_subst
setopt extended_glob
setopt mark_dirs

# jobs
setopt long_list_jobs

# time
REPORTTIME=3

# login logout
watch="all"
log
setopt ignore_eof

# word
WORDCHARS=${WORDCHARS:s,/,,}

# aliases
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias h="history"
alias x="exit"
case $(uname) in
  *BSD|Darwin)
    if [ -x "$(which gnuls)" ]; then
      alias ls="gnuls"
      alias la="ls -lhAF --color=auto"
    else
      alias ls="ls -haFG"
      alias la="ls -lhAFG"
    fi
    alias ps="ps -fU$(whoami)"
    ;;
  SunOS)
    if [ -x "`which gls`" ]; then
      alias ls="gls"
      alias la="ls -lhAF --color=auto"
    else
      alias la="ls -lhAF"
    fi
    alias ps="ps -fl -u$(/usr/xpg4/bin/id -un)"
    ;;
  *)
    alias ls="ls -aFh --color=auto --show-control-chars"
    alias la="ls -lhAF --color=auto"
    alias ps="ps -fU$(whoami) --forest"
    ;;
esac
alias ll=la
alias -g L="| less"
alias -g G="| grep"
alias -g W="| wc"
alias -g C="| pbcopy"

# title
update_title() {
  local command_line=
  typeset -a command_line
  command_line=${(z)2}
  local command=
  if [ ${(t)command_line} = "array-local" ]; then
    command="$command_line[1]"
  else
    command="$2"
  fi
  print -n -P "\e]2;"
  echo -n "(${command})"
  print -n -P " %n@%m:%~\a"

  print -n -P "\e]1;"
  echo -n "${command}"
  print -n -P ":%~\a"
}
## title for X
if [ -n "$DISPLAY" ]; then
  preexec_functions=($preexec_functions update_title)
fi

# screen
if [ "$TERM" = "screen" -o "$TERM" = "screen-bce" ]; then
  chpwd () { echo -n "_`dirs`\\" }
  preexec() {
    emulate -L zsh
    local -a cmd; cmd=(${(z)2})
    case $cmd[1] in
      fg)
        if (( $#cmd == 1 )); then
          cmd=(builtin jobs -l %+)
        else
          cmd=(builtin jobs -l $cmd[2])
        fi
        ;;
      %*)
        cmd=(builtin jobs -l $cmd[1])
        ;;
      cd)
        if (( $#cmd == 2 )); then
          cmd[1]=$cmd[2]
        fi
        ;&
      *)
        echo -n "k$cmd[1]:t\\"
        return
        ;;
    esac

    local -A jt; jt=(${(kv)jobtexts})

    $cmd >>(read num rest
      cmd=(${(z)${(e):-\$jt$num}})
      echo -n "k$cmd[1]:t\\") 2>/dev/null
  }
  chpwd
fi

# Inform Correct Command
setopt correct

# forbid C-s
stty stop undef

# history by peco
function exists { which $1 &> /dev/null }

if exists peco; then
    function peco_select_history() {
        local tac
        local ignore="push.* -f\|rm.* -rf"
        exists gtac && tac="gtac" || { exists tac && tac="tac" || { tac="tail -r" } }
        BUFFER=$(fc -l -n 1 | grep -v "$ignore" | eval $tac | peco --prompt "HISTORY>" --query "$LBUFFER")
        CURSOR=$#BUFFER         # move cursor
        zle -R -c               # refresh
    }

    zle -N peco_select_history
    bindkey '^R' peco_select_history
fi

# search src director by peco
function peco-src () {
    local selected_dir=$(ghq list --full-path | peco --prompt "SRC>" --query "$LBUFFER")
    if [ -n "$selected_dir" ]; then
        BUFFER="cd ${selected_dir}"
        zle accept-line
    fi
    zle clear-screen
}
zle -N peco-src
bindkey '^]' peco-src
